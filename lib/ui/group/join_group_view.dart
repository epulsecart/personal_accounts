import 'dart:convert';
import 'dart:ui';


import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';

import '../../data/groups_module/group_join_request_model.dart';
import '../../generated/l10n.dart';
import '../../state/auth_provider.dart';
import '../../state/group_module/group_join_request_provider.dart';
import '../../theme/theme_consts.dart';

class JoinGroupView extends StatefulWidget {
  const JoinGroupView({super.key});

  @override
  State<JoinGroupView> createState() => _JoinGroupViewState();
}

class _JoinGroupViewState extends State<JoinGroupView> {
  final TextEditingController _codeCtrl = TextEditingController();
  bool _isJoining = false;
  bool _hasScanned = false;

  @override
  void dispose() {
    _codeCtrl.dispose();
    super.dispose();
  }

  Future<void> _handleJoin(String code) async {
    if (_isJoining || code.trim().isEmpty) return;
    setState(() => _isJoining = true);

    try {
      final provider = context.read<GroupJoinRequestProvider>();
      final requester = context.read<AuthProvider>().user!;
      final decodedJson = jsonDecode(utf8.decode(base64Decode(code.trim())));
      final model = GroupJoinRequestModel(
        id: Uuid().v4(), // auto-generated by Firestore
        groupId: decodedJson['groupId'],
        inviteeId: decodedJson['inviteeId'],
        inviteeName: decodedJson['inviteeName'],
        requesterId: requester.uid,
        requesterName: requester.name!,

        status: JoinStatus.pending,
        approverId: null,
        requestedAt: DateTime.now(),
        respondedAt: null,
        message: null,
      );
      await provider.createRequest(model);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(S.of(context).joinRequestSent)),
        );
        _codeCtrl.clear();
      }
    } catch (e) {
      if (mounted) {
        print ("can not join the group $e");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("${S.of(context).errorJoiningGroup} / $e")),
        );
      }
    } finally {
      if (mounted) setState(() => _isJoining = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final t = S.of(context);
    return SingleChildScrollView(
      padding: const EdgeInsets.all(AppConstants.spaceL),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Camera Glass Container
          ClipRRect(
            borderRadius: AppConstants.radiusXL,
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                height: 300,
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.surface.withOpacity(0.4),
                  borderRadius: AppConstants.radiusXL,
                  border: Border.all(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.2),
                  ),
                ),
                child: _hasScanned ? Center(
                  child: CircularProgressIndicator(),
                ):MobileScanner(
                  controller: MobileScannerController(),
                  onDetect: (barcode) async{
                    final qr = barcode.barcodes.first;
                    final coded = qr.displayValue; // âœ… The actual encoded string
                    if (!_hasScanned && coded != null && coded.isNotEmpty) {
                      try {
                        _hasScanned = true;
                        setState(() {
                        });
                        await _handleJoin(coded);

                      }catch(e){
                        print ("can not handle scann $e");
                      }
                      setState(() {
                        _hasScanned = false;
                      });
                    }
                  },
                ),
              ),
            ),
          ),

          const SizedBox(height: AppConstants.spaceL),

          // OR divider
          Row(
            children: [
              const Expanded(child: Divider()),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 12),
                child: Text(t.or),
              ),
              const Expanded(child: Divider()),
            ],
          ),

          const SizedBox(height: AppConstants.spaceM),

          // Manual code input
          TextFormField(
            controller: _codeCtrl,
            decoration: InputDecoration(
              labelText: t.enterJoinCode,
              suffixIcon: IconButton(
                icon: const Icon(Icons.send),
                onPressed: _isJoining ? null : () => _handleJoin(_codeCtrl.text),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
